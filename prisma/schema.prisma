generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  full_name      String
  email          String     @unique
  password       String?
  interest       String?
  favourite_town String?
  registerBy     RegisterBy @default(MANUAL)
  role           UserRole   @default(USER)
  status         UserStatus @default(ACTIVE)

  wishlist  String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]
  posts    Post[]

  @@map("users")
}

model EventCategory {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events Event[]

  @@map("event_categories")
}

model Event {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  event_category_id String        @db.ObjectId
  event_category    EventCategory @relation(fields: [event_category_id], references: [id], onDelete: Cascade)
  event_date        DateTime
  start_time        String
  end_time          String
  event_types       EventType[]
  description       String
  capacity          Int
  latitude          String
  longitude         String
  images            String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blogs Blog[]
  posts Post[]

  @@map("events")
}

model Post {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  image   String[]  @default([])
  user_id String  @db.ObjectId
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  event_id String @db.ObjectId
  event    Event  @relation(fields: [event_id], references: [id], onDelete: Cascade)
  content  String

  likes String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]

  @@map("posts")
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  post_id String @db.ObjectId
  user_id String @db.ObjectId
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  content String
  post    Post   @relation(fields: [post_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Blog {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String  
  content  String
  event_id String? @db.ObjectId

  event Event? @relation(fields: [event_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Booking {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  user_id           String         @db.ObjectId
  booking_cart      BookingCart[]
  total_price       Float
  payment_gateway   PaymentGateway
  payment_intent_id String
  status            BookingStatus  @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

model File {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  type FileType @default(IMAGE)
  url  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Files")
}

type BookingCart {
  event_id   String    @db.ObjectId
  quantity   Int       @default(1)
  event_type EventType
}

type EventType {
  title String
  price Float
}

enum PaymentGateway {
  PAYPAL
  GOOGLE_PAY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum FileType {
  IMAGE
  VIDEO
  AUDIO
}

enum RegisterBy {
  SOCIAL
  MANUAL
}

enum UserRole {
  SUPER_ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  PENDING
  BLOCKED
}
